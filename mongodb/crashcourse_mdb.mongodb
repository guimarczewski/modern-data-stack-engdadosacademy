// https://www.youtube.com/watch?v=ofme2o29ngU - 10:57

// mdb-shell-install.sh é o executável para rodar o mongodb shell, para isso foi transformado em execut e basta rodar o up
// chmod +x seuarquivo 
// ./seuarquivo up
// mongodb/setup-mdbshell.sh up

mongosh $MDB_CONNECTION_STRING;

show dbs

use dbmds //se não tiver um database com esse nome, será criado

show collections

db.dropDatabase()

// criando db, collection and a document
use appdb
db.users.insertOne({ name: "John"})

// showing collection data
db.users.find()

db.users.insertOne({ name: "Sally", age: 19, address: { street: "987 North St"}, hobbies: ["Running"]})

// insert many documents
db.users.insertMany([{ name: "Jill"}, { name: "Mike"}])

//name: "Kyle", age: 26, hobbies: ["Weight Lifting", "Bowling"], address: { street: "987 North St", city: "New York City"}
//name: "Billy", age: 41, hobbies: ["Swimming", "Bowling"], address: { street: "442 South St", city: "New York City"}

db.users.insertMany([{ name: "Kyle", age: 26, hobbies: ["Weight Lifting", "Bowling"], address: { street: "987 North St", city: "New York City"}}, { name: "Billy", age: 41, hobbies: ["Swimming", "Bowling"], address: { street: "442 South St", city: "New York City"}}])

// using limit
db.users.find().limit(2)

// using sort: 1 asc, -1 desc
db.users.find().sort({ name:1 }).limit(2)
db.users.find().sort({ name:-1 }).limit(2)

// if a camp is null, it's like zero in sort
db.users.find().sort({ age:1, name:-1 }).limit(2)

[
  { _id: ObjectId("63b98cf710621a7e6e9b49bf"), name: 'Mike' },
  { _id: ObjectId("63b98b9710621a7e6e9b49bc"), name: 'John' }
]

// using skip
db.users.find().limit(2)

[
  { _id: ObjectId("63b98b9710621a7e6e9b49bc"), name: 'John' },
  {
    _id: ObjectId("63b98c5810621a7e6e9b49bd"),
    name: 'Sally',
    age: 19,
    address: { street: '987 North St' },
    hobbies: [ 'Running' ]
  }
]

db.users.find().skip(1).limit(2)

[
  {
    _id: ObjectId("63b98c5810621a7e6e9b49bd"),
    name: 'Sally',
    age: 19,
    address: { street: '987 North St' },
    hobbies: [ 'Running' ]
  },
  { _id: ObjectId("63b98cf710621a7e6e9b49be"), name: 'Jill' }
]

// criando filtros de linha
db.users.find({ name: "Kyle" })
db.users.find({ age: 26 })

// criando filtros de coluna, ficando somente as com valor = 1
db.users.find({ name: "Kyle" }, { name: 1, age: 1})
[ { _id: ObjectId("63b98e1610621a7e6e9b49c0"), name: 'Kyle' } ]

// se não quiser que retorne o id, basta colocar igual a 0
db.users.find({ name: "Kyle" }, { name: 1, age: 1, _id: 0})
[ { name: 'Kyle', age: 26 } ]

// se quiser remover determinadas colunas, basta colocar igual a 0
db.users.find({ name: "Kyle" }, { name: 0})
[
  {
    _id: ObjectId("63b98e1610621a7e6e9b49c0"),
    age: 26,
    hobbies: [ 'Weight Lifting', 'Bowling' ],
    address: { street: '987 North St', city: 'New York City' }
  }
]

// trazer campos iguais a determinado valor $eq -equal- e diferente de algum valor $ne -not equal
db.users.find({ name: { $eq: "Sally"}}, { name: 1, _id:0 })
[ { name: 'Sally' } ]
db.users.find({ name: { $ne: "Sally"}}, { name: 1, _id:0 })
[
  { name: 'John' },
  { name: 'Jill' },
  { name: 'Mike' },
  { name: 'Kyle' },
  { name: 'Billy' }
]

// maior = $gt - greater than - e $gte - greater and equal
db.users.find({ age: { $gt: 13}}, {name:1, age:1, _id:0})
[
  { name: 'Sally', age: 19 },
  { name: 'Kyle', age: 26 },
  { name: 'Billy', age: 41 }
]

// menor = $lt - less than - e $lte - less than and equal
db.users.find({ age: { $lte: 26}}, {name:1, age:1, _id:0})
[ { name: 'Sally', age: 19 }, { name: 'Kyle', age: 26 } ]

// in = $in or not in = $nin
db.users.find({ name: { $in: ["Kyle", "Sally"]}}, {name:1, age:1, _id:0})
[ { name: 'Sally', age: 19 }, { name: 'Kyle', age: 26 } ]

// exists = True or False, mesmo se tiver um valor null é True
db.users.find({ age: { $exists:true}}, {name:1, age:1, _id:0})
[
  { name: 'Sally', age: 19 },
  { name: 'Kyle', age: 26 },
  { name: 'Billy', age: 41 }
]

db.users.find({ age: { $exists:false}}, {name:1, age:1, _id:0})
[ { name: 'John' }, { name: 'Jill' }, { name: 'Mike' } ]

// inserir null value
db.users.insertOne({ age:null, name: "Bill"})

//maior e menor juntos
db.users.find({ age: { $gte:20, $lte:40 }})
[
  {
    _id: ObjectId("63b98e1610621a7e6e9b49c0"),
    name: 'Kyle',
    age: 26,
    hobbies: [ 'Weight Lifting', 'Bowling' ],
    address: { street: '987 North St', city: 'New York City' }
  }
]

// maior, menor e name equal
db.users.find({ age: { $gte:20, $lte:40 }, name: "Kyle"})


// $and e $or
db.users.find({ $and: [{ age:26}, {name:"Kyle"}]})
db.users.find({ $or: [{ age: { $lte: 20}}, {name:"Kyle"}]}, {name:1, age:1, _id:0})

[ { name: 'Sally', age: 19 }, { name: 'Kyle', age: 26 } ]

// $not - age not greater or equal than 20 or name equal Kyle
db.users.find({ $or: [{ age: { $not: { $gte: 20}}}, {name:"Kyle"}]}, {name:1, age:1, _id:0})

// insertMany - inserir vários documents
db.users.insertMany([{ name: "Tom", balance: 100, dbt: 200 }, { name: "Kristin", balance: 20, dbt: 0 }])

// expression = coluna calculada ou comparação - $dbt is greater than $balance
db.users.find({ $expr: { $gt: ["$dbt", "$balance"]}})

// para acessar diferentes níveis nos documents
db.users.find({ "address.street": "987 North St"})

// firstOne - encontrar o primeiro document = limit 1
db.users.findOne({ age: { $lte: 40}}) find

// count documents
db.users.countDocuments({ age: { $lte: 40}})

// update a field - campos com age 26 set a new age 27
db.users.updateOne({age: 26}, { $set: { age:27}})

// update a field with a _id information
db.users.updateOne({_id: ObjectId("63b9dbbcfc077ef943c39cbc")}, { $set: { age:20}})

// increment $inc - idade +3
db.users.updateOne({_id: ObjectId("63b9dbbcfc077ef943c39cbc")}, { $inc: { age:3}})

// remane = $renamce
db.users.updateOne({_id: ObjectId("63b9dbbcfc077ef943c39cbc")}, { $renamce: { name:"new_name"}})

// $unset remove completamente o campo, não deixando nem o null
db.users.updateOne({_id: ObjectId("63b9dbbcfc077ef943c39cbc")}, { $unset: { age:""}})

// $push para incluir um determinado valor em uma lista
db.users.updateOne({_id: ObjectId("63b98e1610621a7e6e9b49c0")}, { $push: { hobbies:"Swimming"}})

// $pull para remover um valor em uma lista
db.users.updateOne({_id: ObjectId("63b98e1610621a7e6e9b49c0")}, { $pull: { hobbies:"Swimming"}})

// update many documents - todos os campos sem age, incluir como null
db.users.updateMany({ age: { $exists: false}}, { $set: { age: null}} )

// delete one and many - deletar um document
db.users.deleteOne({ name: "John"})

db.users.deleteMany({ age: { $exists: false}})